const primes=function(){let maxInt=8388607;let primeNums=[];const genPrimeNums=()=>{primeNums=new Array(maxInt+1).fill(true);primeNums[0]=primeNums[1]=false;for(let i=2;i*i<=maxInt;i++){if(primeNums[i]){for(let j=i*i;j<=maxInt;j+=i){primeNums[j]=false}}}primeNums=primeNums.reduce(((result,isPrime,index)=>{if(isPrime)result.push(index);return result}),[])};genPrimeNums();const msgs={errNumericRange:"{0} number must be {1} than or equal to {2}.",errNoTarget:"There are no {0} in the {1}."};const getMsg=(key,repArr=null)=>{const msg=msgs[key];return repArr?msg.replace(/{(\d+)}/g,((match,i)=>repArr[i]!==undefined?repArr[i]:match)):msg};const changeMaxInt=num=>{if(num<1)throw new Error(getMsg("errNumericRange",["Specified","greater",1]));maxInt=num;genPrimeNums()};const isPrime=num=>{if(num<2)return false;if(num>maxInt)throw new Error(getMsg("errNumericRange",["Specified","less",maxInt]));return primeNums.includes(num)};const getPrimes=(start=1,end=maxInt)=>{if(start<1)throw new Error(getMsg("errNumericRange",["Starting","greater",1]));if(end>maxInt)throw new Error(getMsg("errNumericRange",["Ending","less",maxInt]));if(start>end)throw new Error(getMsg("errNumericRange",["Starting","less","ending number"]));const primesInRange=primeNums.filter((prime=>prime>=start&&prime<=end));return primesInRange};const getFactors=num=>{if(num<1)throw new Error(getMsg("errNumericRange",["Specified","greater",1]));if(num>maxInt)throw new Error(getMsg("errNumericRange",["Specified","less",maxInt]));const factors=[];let divisor=2;while(num>1&&divisor<=num){if(primeNums.includes(divisor)&&num%divisor===0){factors.push(divisor);num/=divisor}else{divisor++}}return factors};const getRandomPrime=(start=1,end=maxInt)=>{const primesInRange=getPrimes(start,end);if(!primesInRange.length)throw new Error(getMsg("errNoTarget",["prime numbers","specified range"]));return primesInRange[Math.floor(Math.random()*primesInRange.length)]};const isAreCoprime=(a,b)=>{if(a<1||b<1)throw new Error(getMsg("errNumericRange",["Specified","greater",1]));if(a>maxInt||b>maxInt)throw new Error(getMsg("errNumericRange",["Specified","less",maxInt]));const gcd=(x,y)=>{while(y!==0){const temp=y;y=x%y;x=temp}return x};return gcd(a,b)===1};const getPrimesCount=(start=1,end=maxInt)=>{const primesInRange=getPrimes(start,end);if(!primesInRange.length)throw new Error(getMsg("errNoTarget",["prime numbers","specified range"]));return primesInRange.length};const getPrimesIndex=(num,start=1,end=maxInt)=>{if(num<1)throw new Error(getMsg("errNumericRange",["Specified","greater",1]));if(num>maxInt)throw new Error(getMsg("errNumericRange",["Specified","less",maxInt]));const primesInRange=getPrimes(start,end);if(!primesInRange.length)throw new Error(getMsg("errNoTarget",["prime numbers","specified range"]));const position=primesInRange.indexOf(num);if(position===-1)throw new Error(getMsg("errNoTarget",["prime numbers","specified range"]));return position+1};const getPrimesSum=(start=1,end=maxInt)=>{const primesInRange=getPrimes(start,end);return primesInRange.length?primesInRange.reduce(((acc,prime)=>acc+prime),0):0};const getPrimesAverage=(start=1,end=maxInt,places=2)=>{if(places<0)throw new Error(getMsg("errNumericRange",["Decimal point position","greater",0]));const primesInRange=getPrimes(start,end);const average=primesInRange.length?primesInRange.reduce(((acc,prime)=>acc+prime),0)/primesInRange.length:0;return Number(average.toFixed(places))};const getPrimesMedian=(start=1,end=maxInt)=>{const primesInRange=getPrimes(start,end);const length=primesInRange.length;if(!length)return 0;if(length%2===0){const midIndex1=length/2-1;const midIndex2=length/2;return(primesInRange[midIndex1]+primesInRange[midIndex2])/2}else{const midIndex=Math.floor(length/2);return primesInRange[midIndex]}};const getPrimesTwins=(start=1,end=maxInt)=>{const primesInRange=primes.getPrimes(start,end);if(!primesInRange.length)throw new Error(getMsg("errNoTarget",["prime numbers","specified range"]));return primesInRange.reduce(((twin,num,index,arr)=>{if(index<arr.length-1&&arr[index+1]-num===2){twin.push([num,arr[index+1]])}return twin}),[])};const getFactorsFormula=num=>{const factors=getFactors(num);const exponents={};factors.forEach((factor=>{exponents[factor]=(exponents[factor]||0)+1}));return Object.entries(exponents).map((([factor,exponent])=>exponent===1?factor:`${factor}^${exponent}`)).join("*")};return{getMsg:getMsg,changeMaxInt:changeMaxInt,isPrime:isPrime,getPrimes:getPrimes,getFactors:getFactors,getRandomPrime:getRandomPrime,isAreCoprime:isAreCoprime,getPrimesCount:getPrimesCount,getPrimesIndex:getPrimesIndex,getPrimesSum:getPrimesSum,getPrimesAverage:getPrimesAverage,getPrimesMedian:getPrimesMedian,getPrimesTwins:getPrimesTwins,getFactorsFormula:getFactorsFormula}}();module.exports=primes;