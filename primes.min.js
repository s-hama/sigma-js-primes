const primes=function(){let maxInt=8388607;let primeNums=[];const genPrimeNums=()=>{primeNums=new Array(maxInt+1).fill(true);primeNums[0]=primeNums[1]=false;for(let i=2;i*i<=maxInt;i++){if(primeNums[i]){for(let j=i*i;j<=maxInt;j+=i){primeNums[j]=false}}}primeNums=primeNums.reduce(((result,isPrime,index)=>{if(isPrime)result.push(index);return result}),[])};genPrimeNums();const msgs={errNumericRange:"{0} number must be {1} than or equal to {2}.",errNoTarget:"There are no {0} in the {1}."};const getMsg=(key,repArr=null)=>{const msg=msgs[key];return repArr?msg.replace(/{(\d+)}/g,((match,i)=>repArr[i]!==undefined?repArr[i]:match)):msg};const changeMaxInt=num=>{if(num<1)throw new Error(getMsg("errNumericRange",["Specified","greater",1]));maxInt=num;genPrimeNums()};const isPrime=num=>{if(num<2)return false;if(num>maxInt)throw new Error(getMsg("errNumericRange",["Specified","less",maxInt]));return primeNums.includes(num)};const getPrimes=(start=1,end=maxInt)=>{if(start<1)throw new Error(getMsg("errNumericRange",["Starting","greater",1]));if(end>maxInt)throw new Error(getMsg("errNumericRange",["Ending","less",maxInt]));if(start>end)throw new Error(getMsg("errNumericRange",["Starting","less","ending number"]));const primesInRange=primeNums.filter((prime=>prime>=start&&prime<=end));return primesInRange};const getFactors=num=>{if(num<1)throw new Error(getMsg("errNumericRange",["Specified","greater",1]));if(num>maxInt)throw new Error(getMsg("errNumericRange",["Specified","less",maxInt]));const factors=[];let divisor=2;while(num>1&&divisor<=num){if(primeNums.includes(divisor)&&num%divisor===0){factors.push(divisor);num/=divisor}else{divisor++}}return factors};const getRandomPrime=(start=1,end=maxInt)=>{const primesInRange=getPrimes(start,end);if(!primesInRange.length)throw new Error(getMsg("errNoTarget",["prime numbers","specified range"]));return primesInRange[Math.floor(Math.random()*primesInRange.length)]};const isAreCoprime=(a,b)=>{if(a<1||b<1)throw new Error(getMsg("errNumericRange",["Specified","greater",1]));if(a>maxInt||b>maxInt)throw new Error(getMsg("errNumericRange",["Specified","less",maxInt]));const gcd=(x,y)=>{while(y!==0){const temp=y;y=x%y;x=temp}return x};return gcd(a,b)===1};const getPrimesCount=(start=1,end=maxInt)=>{if(start<1)throw new Error(getMsg("errNumericRange",["Starting","greater",1]));if(end>maxInt)throw new Error(getMsg("errNumericRange",["Ending","less",maxInt]));if(start>end)throw new Error(getMsg("errNumericRange",["Starting","less","ending number"]));const primesInRange=primeNums.filter((prime=>prime>=start&&prime<=end));return primesInRange.length};return{getMsg:getMsg,changeMaxInt:changeMaxInt,isPrime:isPrime,getPrimes:getPrimes,getFactors:getFactors,getRandomPrime:getRandomPrime,isAreCoprime:isAreCoprime,getPrimesCount:getPrimesCount}}();module.exports=primes;